const ChartJSImage = require('chart.js-image');

const { SlashCommandBuilder } = require('@discordjs/builders');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('stats')
  	.setDescription('Show stats of your minecraft server.')
    .addSubcommand(subcommand => subcommand.setName('players').setDescription("Check player's stats of the server."))
    .addSubcommand(subcommand => subcommand.setName('uptime').setDescription("Check uptime stats of the server.")),
  
  async execute(client, MessageEmbed, embed, config, embedConfig, Permissions, interaction, messageEmojisReplacer, tick, cross, errorLogger, logger){
    embed = new MessageEmbed()
      .setColor(embedConfig.defaultColor);

    database.serialize(async () => {
      database.all(`SELECT * FROM "${interaction.guild.id}"`, async (error, rows) => {
        //row.timestamp, row.status, row.players
        const subCommand = await interaction.options.getSubcommand();
        let labels = [];

        let playersSet = {
          "label": "Players Count",
          "borderColor": "rgb(255,255,0)",
          "backgroundColor": "rgba(255,+99,+132,+.5)",
          "data": []
        };
        
        let statusSet = {
          "label": "Server Status",
          "borderColor": "rgb(255,255,0)",
          "backgroundColor": "rgba(255,+99,+132,+.5)",
          "data": []
        };

        rows.forEach(async row => {
          let date = new Date((+row.timestamp));
          let time = date.toLocaleTimeString();
          let day = date.getDate();
          let month = date.getMonth() + 1;
          let year = date.getFullYear();
          labels[labels.length] = time + '\n' + day + '/' + month + '/' + year;
          playersSet.data[playersSet.data.length] = row.players;
          let status = row.status === "ON" ? 1 : 0;
          statusSet.data[statusSet.data.length] = status;
        });

        let extraWidth;
        let set;
        let title;
        let yText;

        if(subCommand === "players"){
          extraWidth = Math.round((playersSet.data.length / 5) * 50);
          set = playersSet;
          title = "Minecraft Server Players Count\n             (LAST 24 Hours)";
          yText = "Players Count";
        }else{
          extraWidth = Math.round((statusSet.data.length / 5) * 50);
          set = statusSet;
          title = "Minecraft Server Uptime\n             (LAST 24 Hours)\n           (0 - OFF | 1 - ON)";
          yText = "On/OFF";
        }

        console.log(labels);
        console.log(playersSet);
        console.log(statusSet);
        console.log(set);
        console.log(title);
        console.log(yText);

        const line_chart = ChartJSImage().chart({
            "type": "line",
            "data": {
              "labels": labels,
              "datasets": [
                set
              ]
            },
            "options": {
              "title": {
                "display": true,
                "text": title
              },
              "scales": {
                "xAxes": [
                  {
                    "scaleLabel": {
                      "display": true,
                      "labelString": "Time"
                    }
                  }
                ],
                "yAxes": [
                  {
                    "stacked": true,
                    "scaleLabel": {
                      "display": true,
                      "labelString": yText
                    }
                  }
                ]
              }
            }
          }) // Line chart
          .backgroundColor('skyblue')
          .width(900) // 500px
          .height(300); // 300px

          console.log(`${line_chart.toURL()}`)
          try{
            embed.setImage(`${line_chart.toURL()}`);
          }catch(error){
      await errorLogger(client, interaction, error, "src/commands/stats.js : 114");
          }
      });
    });
  },
}